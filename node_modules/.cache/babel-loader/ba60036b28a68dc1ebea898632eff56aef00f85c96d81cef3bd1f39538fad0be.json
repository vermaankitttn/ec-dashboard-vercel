{"ast":null,"code":"// Google Sheets API service for React app\n// Note: This will need to be connected to a backend API since React can't directly use Google Sheets API\n// For now, we'll create a mock service that can be easily replaced with real API calls\n\nclass GoogleSheetsService {\n  constructor() {\n    this.credentialsFile = 'ec-results-credentials.json';\n    this.spreadsheetUrl = 'https://docs.google.com/spreadsheets/d/1wQrOseeikbaJnF3_twiuI-FmSKo9tLTly02eFTCCLGQ/edit?gid=1422280249#gid=1422280249';\n  }\n\n  // Mock method - replace with actual API call to your backend\n  async loadData() {\n    try {\n      // In a real implementation, this would be a fetch call to your backend API\n      // const response = await fetch('/api/google-sheets-data');\n      // const data = await response.json();\n\n      // For now, return mock data that matches the structure\n      return this.getMockData();\n    } catch (error) {\n      console.error('Error loading Google Sheets data:', error);\n      throw error;\n    }\n  }\n\n  // Mock data that matches your real data structure\n  getMockData() {\n    return [{\n      id: 1,\n      name: \"VIPIN KUMAR SINGH\",\n      flat: \"1725\",\n      totalCount: 14,\n      totalValue: 25.41,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 0,\n        \"1285\": 0,\n        \"1670\": 14\n      },\n      position: 1\n    }, {\n      id: 2,\n      name: \"KAVITA GUPTA\",\n      flat: \"2430\",\n      totalCount: 15,\n      totalValue: 24.34,\n      votes: {\n        \"920\": 0,\n        \"1005\": 4,\n        \"1165\": 0,\n        \"1285\": 0,\n        \"1670\": 11\n      },\n      position: 2\n    }, {\n      id: 3,\n      name: \"VIDIT SRIVASTAVA\",\n      flat: \"2429\",\n      totalCount: 6,\n      totalValue: 10.89,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 0,\n        \"1285\": 0,\n        \"1670\": 6\n      },\n      position: 3\n    }, {\n      id: 4,\n      name: \"MAHESH BHATI\",\n      flat: \"435\",\n      totalCount: 3,\n      totalValue: 4.19,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 0,\n        \"1285\": 3,\n        \"1670\": 0\n      },\n      position: 4\n    }, {\n      id: 5,\n      name: \"JYOTI VERMA\",\n      flat: \"1931\",\n      totalCount: 3,\n      totalValue: 3.8,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 3,\n        \"1285\": 0,\n        \"1670\": 0\n      },\n      position: 5\n    }, {\n      id: 6,\n      name: \"ALKESH PARASHAR\",\n      flat: \"2602\",\n      totalCount: 0,\n      totalValue: 0.0,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 0,\n        \"1285\": 0,\n        \"1670\": 0\n      },\n      position: 6\n    }, {\n      id: 7,\n      name: \"AMIT KUMAR\",\n      flat: \"718\",\n      totalCount: 0,\n      totalValue: 0.0,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 0,\n        \"1285\": 0,\n        \"1670\": 0\n      },\n      position: 7\n    }, {\n      id: 8,\n      name: \"ANIT BHATI\",\n      flat: \"634\",\n      totalCount: 0,\n      totalValue: 0.0,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 0,\n        \"1285\": 0,\n        \"1670\": 0\n      },\n      position: 8\n    }, {\n      id: 9,\n      name: \"ARUN KUMAR\",\n      flat: \"1912\",\n      totalCount: 0,\n      totalValue: 0.0,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 0,\n        \"1285\": 0,\n        \"1670\": 0\n      },\n      position: 9\n    }, {\n      id: 10,\n      name: \"ASHISH BANSAL\",\n      flat: \"1234\",\n      totalCount: 0,\n      totalValue: 0.0,\n      votes: {\n        \"920\": 0,\n        \"1005\": 0,\n        \"1165\": 0,\n        \"1285\": 0,\n        \"1670\": 0\n      },\n      position: 10\n    }];\n  }\n\n  // Method to transform Google Sheets data to our format\n  transformGoogleSheetsData(sheetsData) {\n    if (!sheetsData || !sheetsData.length) {\n      return [];\n    }\n    return sheetsData.map((row, index) => ({\n      id: index + 1,\n      name: row['Candidate Name'] || `Candidate ${index + 1}`,\n      flat: row['Flat#'] || 'N/A',\n      totalCount: parseInt(row['Total Vote Count']) || 0,\n      totalValue: parseFloat(row['Total Vote Value']) || 0.0,\n      votes: {\n        \"920\": parseInt(row['920']) || 0,\n        \"1005\": parseInt(row['1005']) || 0,\n        \"1165\": parseInt(row['1165']) || 0,\n        \"1285\": parseInt(row['1285']) || 0,\n        \"1670\": parseInt(row['1670']) || 0\n      },\n      position: index + 1\n    }));\n  }\n}\nexport default new GoogleSheetsService();","map":{"version":3,"names":["GoogleSheetsService","constructor","credentialsFile","spreadsheetUrl","loadData","getMockData","error","console","id","name","flat","totalCount","totalValue","votes","position","transformGoogleSheetsData","sheetsData","length","map","row","index","parseInt","parseFloat"],"sources":["/Users/ankitverma/Documents/Projects/SKA Metroville/ECResults/src/services/googleSheetsService.js"],"sourcesContent":["// Google Sheets API service for React app\n// Note: This will need to be connected to a backend API since React can't directly use Google Sheets API\n// For now, we'll create a mock service that can be easily replaced with real API calls\n\nclass GoogleSheetsService {\n  constructor() {\n    this.credentialsFile = 'ec-results-credentials.json';\n    this.spreadsheetUrl = 'https://docs.google.com/spreadsheets/d/1wQrOseeikbaJnF3_twiuI-FmSKo9tLTly02eFTCCLGQ/edit?gid=1422280249#gid=1422280249';\n  }\n\n  // Mock method - replace with actual API call to your backend\n  async loadData() {\n    try {\n      // In a real implementation, this would be a fetch call to your backend API\n      // const response = await fetch('/api/google-sheets-data');\n      // const data = await response.json();\n      \n      // For now, return mock data that matches the structure\n      return this.getMockData();\n    } catch (error) {\n      console.error('Error loading Google Sheets data:', error);\n      throw error;\n    }\n  }\n\n  // Mock data that matches your real data structure\n  getMockData() {\n    return [\n      {\n        id: 1,\n        name: \"VIPIN KUMAR SINGH\",\n        flat: \"1725\",\n        totalCount: 14,\n        totalValue: 25.41,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 0, \"1285\": 0, \"1670\": 14 },\n        position: 1\n      },\n      {\n        id: 2,\n        name: \"KAVITA GUPTA\",\n        flat: \"2430\",\n        totalCount: 15,\n        totalValue: 24.34,\n        votes: { \"920\": 0, \"1005\": 4, \"1165\": 0, \"1285\": 0, \"1670\": 11 },\n        position: 2\n      },\n      {\n        id: 3,\n        name: \"VIDIT SRIVASTAVA\",\n        flat: \"2429\",\n        totalCount: 6,\n        totalValue: 10.89,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 0, \"1285\": 0, \"1670\": 6 },\n        position: 3\n      },\n      {\n        id: 4,\n        name: \"MAHESH BHATI\",\n        flat: \"435\",\n        totalCount: 3,\n        totalValue: 4.19,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 0, \"1285\": 3, \"1670\": 0 },\n        position: 4\n      },\n      {\n        id: 5,\n        name: \"JYOTI VERMA\",\n        flat: \"1931\",\n        totalCount: 3,\n        totalValue: 3.8,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 3, \"1285\": 0, \"1670\": 0 },\n        position: 5\n      },\n      {\n        id: 6,\n        name: \"ALKESH PARASHAR\",\n        flat: \"2602\",\n        totalCount: 0,\n        totalValue: 0.0,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 0, \"1285\": 0, \"1670\": 0 },\n        position: 6\n      },\n      {\n        id: 7,\n        name: \"AMIT KUMAR\",\n        flat: \"718\",\n        totalCount: 0,\n        totalValue: 0.0,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 0, \"1285\": 0, \"1670\": 0 },\n        position: 7\n      },\n      {\n        id: 8,\n        name: \"ANIT BHATI\",\n        flat: \"634\",\n        totalCount: 0,\n        totalValue: 0.0,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 0, \"1285\": 0, \"1670\": 0 },\n        position: 8\n      },\n      {\n        id: 9,\n        name: \"ARUN KUMAR\",\n        flat: \"1912\",\n        totalCount: 0,\n        totalValue: 0.0,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 0, \"1285\": 0, \"1670\": 0 },\n        position: 9\n      },\n      {\n        id: 10,\n        name: \"ASHISH BANSAL\",\n        flat: \"1234\",\n        totalCount: 0,\n        totalValue: 0.0,\n        votes: { \"920\": 0, \"1005\": 0, \"1165\": 0, \"1285\": 0, \"1670\": 0 },\n        position: 10\n      }\n    ];\n  }\n\n  // Method to transform Google Sheets data to our format\n  transformGoogleSheetsData(sheetsData) {\n    if (!sheetsData || !sheetsData.length) {\n      return [];\n    }\n\n    return sheetsData.map((row, index) => ({\n      id: index + 1,\n      name: row['Candidate Name'] || `Candidate ${index + 1}`,\n      flat: row['Flat#'] || 'N/A',\n      totalCount: parseInt(row['Total Vote Count']) || 0,\n      totalValue: parseFloat(row['Total Vote Value']) || 0.0,\n      votes: {\n        \"920\": parseInt(row['920']) || 0,\n        \"1005\": parseInt(row['1005']) || 0,\n        \"1165\": parseInt(row['1165']) || 0,\n        \"1285\": parseInt(row['1285']) || 0,\n        \"1670\": parseInt(row['1670']) || 0\n      },\n      position: index + 1\n    }));\n  }\n}\n\nexport default new GoogleSheetsService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}