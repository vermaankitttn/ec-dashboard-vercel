{"ast":null,"code":"// Photo mapping utility for candidate photos\nconst candidatePhotos = {\n  'PRAVEEN KUMAR JHA': 'https://ec-results-backend.loca.lt/candidates/PRAVEEN_KUMAR_JHA.png',\n  'ALKESH PARASHAR': 'https://ec-results-backend.loca.lt/candidates/ALKESH_PARASHAR.png',\n  'ASHISH BANSAL (ZINNIA)': 'https://ec-results-backend.loca.lt/candidates/ASHISH_BANSAL_(ZINNIA).png',\n  'ASHISH BANSAL (ORCHID)': 'https://ec-results-backend.loca.lt/candidates/ASHISH_BANSAL_(ORCHID).png',\n  'JYOTI VERMA': 'https://ec-results-backend.loca.lt/candidates/JYOTI_VERMA.png',\n  'KAVITA GUPTA': 'https://ec-results-backend.loca.lt/candidates/KAVITA_GUPTA.png',\n  'RAHUL KUMAR': 'https://ec-results-backend.loca.lt/candidates/RAHUL_KUMAR.png',\n  'SUNIL KUMAR DWIVEDI': 'https://ec-results-backend.loca.lt/candidates/SUNIL_KUMAR_DWIVEDI.png',\n  'SURESH KUMAR VERMA': 'https://ec-results-backend.loca.lt/candidates/SURESH_KUMAR_VERMA.png',\n  'VAISHALI SINHA': 'https://ec-results-backend.loca.lt/candidates/VAISHALI_SINHA.png',\n  'VIDIT SRIVASTAVA': 'https://ec-results-backend.loca.lt/candidates/VIDIT_SRIVASTAVA.png',\n  'VIKRAM SINGH GURJAR': 'https://ec-results-backend.loca.lt/candidates/VIKRAM_SINGH_GURJAR.png',\n  'VINAY KUMAR SEHRAWAT': 'https://ec-results-backend.loca.lt/candidates/VINAY_SEHRAWAT.png',\n  'VINOD KUMAR SINGH': 'https://ec-results-backend.loca.lt/candidates/VINOD_KUMAR_SINGH.png',\n  'VIPIN KUMAR SINGH': 'https://ec-results-backend.loca.lt/candidates/VIPIN_KUMAR_SINGH.png',\n  // New candidates\n  'AMIT KUMAR': 'https://ec-results-backend.loca.lt/candidates/AMIT_KUMAR.png',\n  'ARUN KUMAR': 'https://ec-results-backend.loca.lt/candidates/ARUN_KUMAR.png',\n  'MAHESH BHATI': 'https://ec-results-backend.loca.lt/candidates/MAHESH_BHATI.png',\n  'NITIN ANAND': 'https://ec-results-backend.loca.lt/candidates/NITIN_ANAND.png',\n  'VIJAY KUMAR SHARMA': 'https://ec-results-backend.loca.lt/candidates/VIJAY_KUMAR_SHARMA.png',\n  'ANIT BHATI': 'https://ec-results-backend.loca.lt/candidates/ANIT_BHATI.png'\n};\n\n// Function to get candidate photo URL\nexport const getCandidatePhoto = candidateName => {\n  // Try exact match first\n  if (candidatePhotos[candidateName]) {\n    return candidatePhotos[candidateName];\n  }\n\n  // Try case-insensitive match\n  const upperName = candidateName.toUpperCase();\n  if (candidatePhotos[upperName]) {\n    return candidatePhotos[upperName];\n  }\n\n  // Try partial match (in case names don't match exactly)\n  for (const [photoName, photoPath] of Object.entries(candidatePhotos)) {\n    if (photoPath && (upperName.includes(photoName) || photoName.includes(upperName))) {\n      return photoPath;\n    }\n  }\n\n  // Return null if no match found\n  return null;\n};\n\n// Function to get initials as fallback\nexport const getInitials = name => {\n  return name.split(' ').map(word => word[0]).join('').slice(0, 2);\n};\n\n// Function to test if photo exists\nexport const testPhotoExists = async photoUrl => {\n  if (!photoUrl) return false;\n  try {\n    const response = await fetch(photoUrl, {\n      method: 'HEAD'\n    });\n    return response.ok;\n  } catch (error) {\n    console.log('Photo not found:', photoUrl);\n    return false;\n  }\n};\nexport default candidatePhotos;","map":{"version":3,"names":["candidatePhotos","getCandidatePhoto","candidateName","upperName","toUpperCase","photoName","photoPath","Object","entries","includes","getInitials","name","split","map","word","join","slice","testPhotoExists","photoUrl","response","fetch","method","ok","error","console","log"],"sources":["/Users/ankitverma/Documents/Projects/SKA Metroville/ECResults/src/utils/photoMapping.js"],"sourcesContent":["// Photo mapping utility for candidate photos\nconst candidatePhotos = {\n  'PRAVEEN KUMAR JHA': 'https://ec-results-backend.loca.lt/candidates/PRAVEEN_KUMAR_JHA.png',\n  'ALKESH PARASHAR': 'https://ec-results-backend.loca.lt/candidates/ALKESH_PARASHAR.png',\n  'ASHISH BANSAL (ZINNIA)': 'https://ec-results-backend.loca.lt/candidates/ASHISH_BANSAL_(ZINNIA).png',\n  'ASHISH BANSAL (ORCHID)': 'https://ec-results-backend.loca.lt/candidates/ASHISH_BANSAL_(ORCHID).png',\n  'JYOTI VERMA': 'https://ec-results-backend.loca.lt/candidates/JYOTI_VERMA.png',\n  'KAVITA GUPTA': 'https://ec-results-backend.loca.lt/candidates/KAVITA_GUPTA.png',\n  'RAHUL KUMAR': 'https://ec-results-backend.loca.lt/candidates/RAHUL_KUMAR.png',\n  'SUNIL KUMAR DWIVEDI': 'https://ec-results-backend.loca.lt/candidates/SUNIL_KUMAR_DWIVEDI.png',\n  'SURESH KUMAR VERMA': 'https://ec-results-backend.loca.lt/candidates/SURESH_KUMAR_VERMA.png',\n  'VAISHALI SINHA': 'https://ec-results-backend.loca.lt/candidates/VAISHALI_SINHA.png',\n  'VIDIT SRIVASTAVA': 'https://ec-results-backend.loca.lt/candidates/VIDIT_SRIVASTAVA.png',\n  'VIKRAM SINGH GURJAR': 'https://ec-results-backend.loca.lt/candidates/VIKRAM_SINGH_GURJAR.png',\n  'VINAY KUMAR SEHRAWAT': 'https://ec-results-backend.loca.lt/candidates/VINAY_SEHRAWAT.png',\n  'VINOD KUMAR SINGH': 'https://ec-results-backend.loca.lt/candidates/VINOD_KUMAR_SINGH.png',\n  'VIPIN KUMAR SINGH': 'https://ec-results-backend.loca.lt/candidates/VIPIN_KUMAR_SINGH.png',\n  // New candidates\n  'AMIT KUMAR': 'https://ec-results-backend.loca.lt/candidates/AMIT_KUMAR.png',\n  'ARUN KUMAR': 'https://ec-results-backend.loca.lt/candidates/ARUN_KUMAR.png',\n  'MAHESH BHATI': 'https://ec-results-backend.loca.lt/candidates/MAHESH_BHATI.png',\n  'NITIN ANAND': 'https://ec-results-backend.loca.lt/candidates/NITIN_ANAND.png',\n  'VIJAY KUMAR SHARMA': 'https://ec-results-backend.loca.lt/candidates/VIJAY_KUMAR_SHARMA.png',\n  'ANIT BHATI': 'https://ec-results-backend.loca.lt/candidates/ANIT_BHATI.png'\n};\n\n// Function to get candidate photo URL\nexport const getCandidatePhoto = (candidateName) => {\n  // Try exact match first\n  if (candidatePhotos[candidateName]) {\n    return candidatePhotos[candidateName];\n  }\n  \n  // Try case-insensitive match\n  const upperName = candidateName.toUpperCase();\n  if (candidatePhotos[upperName]) {\n    return candidatePhotos[upperName];\n  }\n  \n  // Try partial match (in case names don't match exactly)\n  for (const [photoName, photoPath] of Object.entries(candidatePhotos)) {\n    if (photoPath && (upperName.includes(photoName) || photoName.includes(upperName))) {\n      return photoPath;\n    }\n  }\n  \n  // Return null if no match found\n  return null;\n};\n\n// Function to get initials as fallback\nexport const getInitials = (name) => {\n  return name.split(' ').map(word => word[0]).join('').slice(0, 2);\n};\n\n// Function to test if photo exists\nexport const testPhotoExists = async (photoUrl) => {\n  if (!photoUrl) return false;\n  try {\n    const response = await fetch(photoUrl, { method: 'HEAD' });\n    return response.ok;\n  } catch (error) {\n    console.log('Photo not found:', photoUrl);\n    return false;\n  }\n};\n\nexport default candidatePhotos;\n"],"mappings":"AAAA;AACA,MAAMA,eAAe,GAAG;EACtB,mBAAmB,EAAE,qEAAqE;EAC1F,iBAAiB,EAAE,mEAAmE;EACtF,wBAAwB,EAAE,0EAA0E;EACpG,wBAAwB,EAAE,0EAA0E;EACpG,aAAa,EAAE,+DAA+D;EAC9E,cAAc,EAAE,gEAAgE;EAChF,aAAa,EAAE,+DAA+D;EAC9E,qBAAqB,EAAE,uEAAuE;EAC9F,oBAAoB,EAAE,sEAAsE;EAC5F,gBAAgB,EAAE,kEAAkE;EACpF,kBAAkB,EAAE,oEAAoE;EACxF,qBAAqB,EAAE,uEAAuE;EAC9F,sBAAsB,EAAE,kEAAkE;EAC1F,mBAAmB,EAAE,qEAAqE;EAC1F,mBAAmB,EAAE,qEAAqE;EAC1F;EACA,YAAY,EAAE,8DAA8D;EAC5E,YAAY,EAAE,8DAA8D;EAC5E,cAAc,EAAE,gEAAgE;EAChF,aAAa,EAAE,+DAA+D;EAC9E,oBAAoB,EAAE,sEAAsE;EAC5F,YAAY,EAAE;AAChB,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAIC,aAAa,IAAK;EAClD;EACA,IAAIF,eAAe,CAACE,aAAa,CAAC,EAAE;IAClC,OAAOF,eAAe,CAACE,aAAa,CAAC;EACvC;;EAEA;EACA,MAAMC,SAAS,GAAGD,aAAa,CAACE,WAAW,CAAC,CAAC;EAC7C,IAAIJ,eAAe,CAACG,SAAS,CAAC,EAAE;IAC9B,OAAOH,eAAe,CAACG,SAAS,CAAC;EACnC;;EAEA;EACA,KAAK,MAAM,CAACE,SAAS,EAAEC,SAAS,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACR,eAAe,CAAC,EAAE;IACpE,IAAIM,SAAS,KAAKH,SAAS,CAACM,QAAQ,CAACJ,SAAS,CAAC,IAAIA,SAAS,CAACI,QAAQ,CAACN,SAAS,CAAC,CAAC,EAAE;MACjF,OAAOG,SAAS;IAClB;EACF;;EAEA;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMI,WAAW,GAAIC,IAAI,IAAK;EACnC,OAAOA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAClE,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,QAAQ,IAAK;EACjD,IAAI,CAACA,QAAQ,EAAE,OAAO,KAAK;EAC3B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,EAAE;MAAEG,MAAM,EAAE;IAAO,CAAC,CAAC;IAC1D,OAAOF,QAAQ,CAACG,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEP,QAAQ,CAAC;IACzC,OAAO,KAAK;EACd;AACF,CAAC;AAED,eAAelB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}