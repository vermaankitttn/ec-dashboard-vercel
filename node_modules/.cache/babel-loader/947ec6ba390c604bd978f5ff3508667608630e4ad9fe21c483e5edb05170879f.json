{"ast":null,"code":"// Photo mapping utility for candidate photos\nconst candidatePhotos = {\n  'PRAVEEN KUMAR JHA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/PRAVEEN_KUMAR_JHA.png',\n  'ALKESH PARASHAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ALKESH_PARASHAR.png',\n  'ASHISH BANSAL (ZINNIA)': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ASHISH_BANSAL_(ZINNIA).png',\n  'ASHISH BANSAL (ORCHID)': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ASHISH_BANSAL_(ORCHID).png',\n  'JYOTI VERMA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/JYOTI_VERMA.png',\n  'KAVITA GUPTA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/KAVITA_GUPTA.png',\n  'RAHUL KUMAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/RAHUL_KUMAR.png',\n  'SUNIL KUMAR DWIVEDI': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/SUNIL_KUMAR_DWIVEDI.png',\n  'SURESH KUMAR VERMA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/SURESH_KUMAR_VERMA.png',\n  'VAISHALI SINHA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VAISHALI_SINHA.png',\n  'VIDIT SRIVASTAVA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VIDIT_SRIVASTAVA.png',\n  'VIKRAM SINGH GURJAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VIKRAM_SINGH_GURJAR.png',\n  'VINAY KUMAR SEHRAWAT': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VINAY_SEHRAWAT.png',\n  'VINOD KUMAR SINGH': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VINOD_KUMAR_SINGH.png',\n  'VIPIN KUMAR SINGH': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VIPIN_KUMAR_SINGH.png',\n  // New candidates\n  'AMIT KUMAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/AMIT_KUMAR.png',\n  'ARUN KUMAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ARUN_KUMAR.png',\n  'MAHESH BHATI': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/MAHESH_BHATI.png',\n  'NITIN ANAND': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/NITIN_ANAND.png',\n  'VIJAY KUMAR SHARMA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VIJAY_KUMAR_SHARMA.png',\n  'ANIT BHATI': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ANIT_BHATI.png'\n};\n\n// Cache for preloaded images\nconst imageCache = new Map();\n\n// Function to preload images\nexport const preloadImages = async (candidateNames = null) => {\n  const namesToPreload = candidateNames || Object.keys(candidatePhotos);\n  console.log('üñºÔ∏è Preloading images for better mobile performance...');\n  const preloadPromises = namesToPreload.map(async name => {\n    const photoUrl = getCandidatePhoto(name);\n    if (!photoUrl) return;\n    try {\n      // Create a new Image object to preload\n      const img = new Image();\n\n      // Set crossOrigin to handle CORS issues\n      img.crossOrigin = 'anonymous';\n      const loadPromise = new Promise((resolve, reject) => {\n        img.onload = () => {\n          imageCache.set(photoUrl, img);\n          console.log(`‚úÖ Preloaded: ${name}`);\n          resolve(photoUrl);\n        };\n        img.onerror = () => {\n          console.log(`‚ùå Failed to preload: ${name}`);\n          reject(new Error(`Failed to load image for ${name}`));\n        };\n      });\n\n      // Start loading the image\n      img.src = photoUrl;\n\n      // Add a timeout to prevent hanging\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Image load timeout')), 10000);\n      });\n      return Promise.race([loadPromise, timeoutPromise]);\n    } catch (error) {\n      console.log(`‚ö†Ô∏è Error preloading ${name}:`, error.message);\n    }\n  });\n  try {\n    await Promise.allSettled(preloadPromises);\n    console.log('üéâ Image preloading completed');\n  } catch (error) {\n    console.log('‚ö†Ô∏è Some images failed to preload:', error.message);\n  }\n};\n\n// Function to get candidate photo URL with caching\nexport const getCandidatePhoto = candidateName => {\n  // Try exact match first\n  if (candidatePhotos[candidateName]) {\n    return candidatePhotos[candidateName];\n  }\n\n  // Try case-insensitive match\n  const upperName = candidateName.toUpperCase();\n  if (candidatePhotos[upperName]) {\n    return candidatePhotos[upperName];\n  }\n\n  // Try partial match (in case names don't match exactly)\n  for (const [photoName, photoPath] of Object.entries(candidatePhotos)) {\n    if (photoPath && (upperName.includes(photoName) || photoName.includes(upperName))) {\n      return photoPath;\n    }\n  }\n\n  // Return null if no match found\n  return null;\n};\n\n// Function to check if image is cached\nexport const isImageCached = photoUrl => {\n  return imageCache.has(photoUrl);\n};\n\n// Function to get cached image\nexport const getCachedImage = photoUrl => {\n  return imageCache.get(photoUrl);\n};\n\n// Function to get initials as fallback\nexport const getInitials = name => {\n  return name.split(' ').map(word => word[0]).join('').slice(0, 2);\n};\n\n// Function to test if photo exists\nexport const testPhotoExists = async photoUrl => {\n  if (!photoUrl) return false;\n  try {\n    const response = await fetch(photoUrl, {\n      method: 'HEAD'\n    });\n    return response.ok;\n  } catch (error) {\n    console.log('Photo not found:', photoUrl);\n    return false;\n  }\n};\n\n// Function to warm up the image server connection\nexport const warmUpImageServer = async () => {\n  console.log('üî• Warming up image server connection...');\n\n  // Try to load a small test image first to establish connection\n  const testUrl = 'https://ska-ec-backend-2025-aug.loca.lt/candidates/PRAVEEN_KUMAR_JHA.png';\n  try {\n    const response = await fetch(testUrl, {\n      method: 'HEAD',\n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    if (response.ok) {\n      console.log('‚úÖ Image server connection established');\n      return true;\n    } else {\n      console.log('‚ö†Ô∏è Image server responded but not ok');\n      return false;\n    }\n  } catch (error) {\n    console.log('‚ùå Failed to connect to image server:', error.message);\n    return false;\n  }\n};\nexport default candidatePhotos;","map":{"version":3,"names":["candidatePhotos","imageCache","Map","preloadImages","candidateNames","namesToPreload","Object","keys","console","log","preloadPromises","map","name","photoUrl","getCandidatePhoto","img","Image","crossOrigin","loadPromise","Promise","resolve","reject","onload","set","onerror","Error","src","timeoutPromise","_","setTimeout","race","error","message","allSettled","candidateName","upperName","toUpperCase","photoName","photoPath","entries","includes","isImageCached","has","getCachedImage","get","getInitials","split","word","join","slice","testPhotoExists","response","fetch","method","ok","warmUpImageServer","testUrl","mode","cache"],"sources":["/Users/ankitverma/Documents/Projects/SKA Metroville/ECResults/src/utils/photoMapping.js"],"sourcesContent":["// Photo mapping utility for candidate photos\nconst candidatePhotos = {\n  'PRAVEEN KUMAR JHA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/PRAVEEN_KUMAR_JHA.png',\n  'ALKESH PARASHAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ALKESH_PARASHAR.png',\n  'ASHISH BANSAL (ZINNIA)': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ASHISH_BANSAL_(ZINNIA).png',\n  'ASHISH BANSAL (ORCHID)': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ASHISH_BANSAL_(ORCHID).png',\n  'JYOTI VERMA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/JYOTI_VERMA.png',\n  'KAVITA GUPTA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/KAVITA_GUPTA.png',\n  'RAHUL KUMAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/RAHUL_KUMAR.png',\n  'SUNIL KUMAR DWIVEDI': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/SUNIL_KUMAR_DWIVEDI.png',\n  'SURESH KUMAR VERMA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/SURESH_KUMAR_VERMA.png',\n  'VAISHALI SINHA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VAISHALI_SINHA.png',\n  'VIDIT SRIVASTAVA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VIDIT_SRIVASTAVA.png',\n  'VIKRAM SINGH GURJAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VIKRAM_SINGH_GURJAR.png',\n  'VINAY KUMAR SEHRAWAT': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VINAY_SEHRAWAT.png',\n  'VINOD KUMAR SINGH': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VINOD_KUMAR_SINGH.png',\n  'VIPIN KUMAR SINGH': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VIPIN_KUMAR_SINGH.png',\n  // New candidates\n  'AMIT KUMAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/AMIT_KUMAR.png',\n  'ARUN KUMAR': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ARUN_KUMAR.png',\n  'MAHESH BHATI': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/MAHESH_BHATI.png',\n  'NITIN ANAND': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/NITIN_ANAND.png',\n  'VIJAY KUMAR SHARMA': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/VIJAY_KUMAR_SHARMA.png',\n  'ANIT BHATI': 'https://ska-ec-backend-2025-aug.loca.lt/candidates/ANIT_BHATI.png'\n};\n\n// Cache for preloaded images\nconst imageCache = new Map();\n\n// Function to preload images\nexport const preloadImages = async (candidateNames = null) => {\n  const namesToPreload = candidateNames || Object.keys(candidatePhotos);\n  \n  console.log('üñºÔ∏è Preloading images for better mobile performance...');\n  \n  const preloadPromises = namesToPreload.map(async (name) => {\n    const photoUrl = getCandidatePhoto(name);\n    if (!photoUrl) return;\n    \n    try {\n      // Create a new Image object to preload\n      const img = new Image();\n      \n      // Set crossOrigin to handle CORS issues\n      img.crossOrigin = 'anonymous';\n      \n      const loadPromise = new Promise((resolve, reject) => {\n        img.onload = () => {\n          imageCache.set(photoUrl, img);\n          console.log(`‚úÖ Preloaded: ${name}`);\n          resolve(photoUrl);\n        };\n        img.onerror = () => {\n          console.log(`‚ùå Failed to preload: ${name}`);\n          reject(new Error(`Failed to load image for ${name}`));\n        };\n      });\n      \n      // Start loading the image\n      img.src = photoUrl;\n      \n      // Add a timeout to prevent hanging\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Image load timeout')), 10000);\n      });\n      \n      return Promise.race([loadPromise, timeoutPromise]);\n    } catch (error) {\n      console.log(`‚ö†Ô∏è Error preloading ${name}:`, error.message);\n    }\n  });\n  \n  try {\n    await Promise.allSettled(preloadPromises);\n    console.log('üéâ Image preloading completed');\n  } catch (error) {\n    console.log('‚ö†Ô∏è Some images failed to preload:', error.message);\n  }\n};\n\n// Function to get candidate photo URL with caching\nexport const getCandidatePhoto = (candidateName) => {\n  // Try exact match first\n  if (candidatePhotos[candidateName]) {\n    return candidatePhotos[candidateName];\n  }\n  \n  // Try case-insensitive match\n  const upperName = candidateName.toUpperCase();\n  if (candidatePhotos[upperName]) {\n    return candidatePhotos[upperName];\n  }\n  \n  // Try partial match (in case names don't match exactly)\n  for (const [photoName, photoPath] of Object.entries(candidatePhotos)) {\n    if (photoPath && (upperName.includes(photoName) || photoName.includes(upperName))) {\n      return photoPath;\n    }\n  }\n  \n  // Return null if no match found\n  return null;\n};\n\n// Function to check if image is cached\nexport const isImageCached = (photoUrl) => {\n  return imageCache.has(photoUrl);\n};\n\n// Function to get cached image\nexport const getCachedImage = (photoUrl) => {\n  return imageCache.get(photoUrl);\n};\n\n// Function to get initials as fallback\nexport const getInitials = (name) => {\n  return name.split(' ').map(word => word[0]).join('').slice(0, 2);\n};\n\n// Function to test if photo exists\nexport const testPhotoExists = async (photoUrl) => {\n  if (!photoUrl) return false;\n  try {\n    const response = await fetch(photoUrl, { method: 'HEAD' });\n    return response.ok;\n  } catch (error) {\n    console.log('Photo not found:', photoUrl);\n    return false;\n  }\n};\n\n// Function to warm up the image server connection\nexport const warmUpImageServer = async () => {\n  console.log('üî• Warming up image server connection...');\n  \n  // Try to load a small test image first to establish connection\n  const testUrl = 'https://ska-ec-backend-2025-aug.loca.lt/candidates/PRAVEEN_KUMAR_JHA.png';\n  \n  try {\n    const response = await fetch(testUrl, { \n      method: 'HEAD',\n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    \n    if (response.ok) {\n      console.log('‚úÖ Image server connection established');\n      return true;\n    } else {\n      console.log('‚ö†Ô∏è Image server responded but not ok');\n      return false;\n    }\n  } catch (error) {\n    console.log('‚ùå Failed to connect to image server:', error.message);\n    return false;\n  }\n};\n\nexport default candidatePhotos;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}