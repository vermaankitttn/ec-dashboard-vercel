{"ast":null,"code":"// Photo mapping utility for candidate photos\nconst candidatePhotos = {\n  'PRAVEEN KUMAR JHA': '/candidates/PRAVEEN KUMAR JHA.png',\n  'ALKESH PARASHAR': '/candidates/ALKESH PARASHAR.png',\n  'ASHISH BANSAL ZINNIA': '/candidates/ASHISH BANSAL ZINNIA.png',\n  'JYOTI VERMA': '/candidates/JYOTI VERMA.png',\n  'KAVITA GUPTA': '/candidates/KAVITA GUPTA.png',\n  'RAHUL KUMAR': '/candidates/RAHUL KUMAR.png',\n  'SUNIL KUMAR DWIVEDI': '/candidates/SUNIL KUMAR DWIVEDI.png',\n  'SURESH KUMAR VERMA': '/candidates/SURESH KUMAR VERMA.png',\n  'VAISHALI SINHA': '/candidates/VAISHALI SINHA.png',\n  'VIDIT SRIVASTAVA': '/candidates/VIDIT SRIVASTAVA.png',\n  'VIKRAM SINGH GURJAR': '/candidates/VIKRAM SINGH GURJAR.png',\n  'VINAY SEHRAWAT': '/candidates/VINAY SEHRAWAT.png',\n  'VINOD KUMAR SINGH': '/candidates/VINOD KUMAR SINGH.png',\n  'VIPIN KUMAR SINGH': '/candidates/VIPIN KUMAR SINGH.png'\n};\n\n// Function to get candidate photo URL\nexport const getCandidatePhoto = candidateName => {\n  // Try exact match first\n  if (candidatePhotos[candidateName]) {\n    return candidatePhotos[candidateName];\n  }\n\n  // Try case-insensitive match\n  const upperName = candidateName.toUpperCase();\n  if (candidatePhotos[upperName]) {\n    return candidatePhotos[upperName];\n  }\n\n  // Try partial match (in case names don't match exactly)\n  for (const [photoName, photoPath] of Object.entries(candidatePhotos)) {\n    if (upperName.includes(photoName) || photoName.includes(upperName)) {\n      return photoPath;\n    }\n  }\n\n  // Return null if no match found\n  return null;\n};\n\n// Function to get initials as fallback\nexport const getInitials = name => {\n  return name.split(' ').map(word => word[0]).join('').slice(0, 2);\n};\n\n// Function to test if photo exists\nexport const testPhotoExists = async photoUrl => {\n  try {\n    const response = await fetch(photoUrl, {\n      method: 'HEAD'\n    });\n    return response.ok;\n  } catch (error) {\n    console.log('Photo not found:', photoUrl);\n    return false;\n  }\n};\nexport default candidatePhotos;","map":{"version":3,"names":["candidatePhotos","getCandidatePhoto","candidateName","upperName","toUpperCase","photoName","photoPath","Object","entries","includes","getInitials","name","split","map","word","join","slice","testPhotoExists","photoUrl","response","fetch","method","ok","error","console","log"],"sources":["/Users/ankitverma/Documents/Projects/SKA Metroville/ECResults/src/utils/photoMapping.js"],"sourcesContent":["// Photo mapping utility for candidate photos\nconst candidatePhotos = {\n  'PRAVEEN KUMAR JHA': '/candidates/PRAVEEN KUMAR JHA.png',\n  'ALKESH PARASHAR': '/candidates/ALKESH PARASHAR.png',\n  'ASHISH BANSAL ZINNIA': '/candidates/ASHISH BANSAL ZINNIA.png',\n  'JYOTI VERMA': '/candidates/JYOTI VERMA.png',\n  'KAVITA GUPTA': '/candidates/KAVITA GUPTA.png',\n  'RAHUL KUMAR': '/candidates/RAHUL KUMAR.png',\n  'SUNIL KUMAR DWIVEDI': '/candidates/SUNIL KUMAR DWIVEDI.png',\n  'SURESH KUMAR VERMA': '/candidates/SURESH KUMAR VERMA.png',\n  'VAISHALI SINHA': '/candidates/VAISHALI SINHA.png',\n  'VIDIT SRIVASTAVA': '/candidates/VIDIT SRIVASTAVA.png',\n  'VIKRAM SINGH GURJAR': '/candidates/VIKRAM SINGH GURJAR.png',\n  'VINAY SEHRAWAT': '/candidates/VINAY SEHRAWAT.png',\n  'VINOD KUMAR SINGH': '/candidates/VINOD KUMAR SINGH.png',\n  'VIPIN KUMAR SINGH': '/candidates/VIPIN KUMAR SINGH.png'\n};\n\n// Function to get candidate photo URL\nexport const getCandidatePhoto = (candidateName) => {\n  // Try exact match first\n  if (candidatePhotos[candidateName]) {\n    return candidatePhotos[candidateName];\n  }\n  \n  // Try case-insensitive match\n  const upperName = candidateName.toUpperCase();\n  if (candidatePhotos[upperName]) {\n    return candidatePhotos[upperName];\n  }\n  \n  // Try partial match (in case names don't match exactly)\n  for (const [photoName, photoPath] of Object.entries(candidatePhotos)) {\n    if (upperName.includes(photoName) || photoName.includes(upperName)) {\n      return photoPath;\n    }\n  }\n  \n  // Return null if no match found\n  return null;\n};\n\n// Function to get initials as fallback\nexport const getInitials = (name) => {\n  return name.split(' ').map(word => word[0]).join('').slice(0, 2);\n};\n\n// Function to test if photo exists\nexport const testPhotoExists = async (photoUrl) => {\n  try {\n    const response = await fetch(photoUrl, { method: 'HEAD' });\n    return response.ok;\n  } catch (error) {\n    console.log('Photo not found:', photoUrl);\n    return false;\n  }\n};\n\nexport default candidatePhotos;\n"],"mappings":"AAAA;AACA,MAAMA,eAAe,GAAG;EACtB,mBAAmB,EAAE,mCAAmC;EACxD,iBAAiB,EAAE,iCAAiC;EACpD,sBAAsB,EAAE,sCAAsC;EAC9D,aAAa,EAAE,6BAA6B;EAC5C,cAAc,EAAE,8BAA8B;EAC9C,aAAa,EAAE,6BAA6B;EAC5C,qBAAqB,EAAE,qCAAqC;EAC5D,oBAAoB,EAAE,oCAAoC;EAC1D,gBAAgB,EAAE,gCAAgC;EAClD,kBAAkB,EAAE,kCAAkC;EACtD,qBAAqB,EAAE,qCAAqC;EAC5D,gBAAgB,EAAE,gCAAgC;EAClD,mBAAmB,EAAE,mCAAmC;EACxD,mBAAmB,EAAE;AACvB,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAIC,aAAa,IAAK;EAClD;EACA,IAAIF,eAAe,CAACE,aAAa,CAAC,EAAE;IAClC,OAAOF,eAAe,CAACE,aAAa,CAAC;EACvC;;EAEA;EACA,MAAMC,SAAS,GAAGD,aAAa,CAACE,WAAW,CAAC,CAAC;EAC7C,IAAIJ,eAAe,CAACG,SAAS,CAAC,EAAE;IAC9B,OAAOH,eAAe,CAACG,SAAS,CAAC;EACnC;;EAEA;EACA,KAAK,MAAM,CAACE,SAAS,EAAEC,SAAS,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACR,eAAe,CAAC,EAAE;IACpE,IAAIG,SAAS,CAACM,QAAQ,CAACJ,SAAS,CAAC,IAAIA,SAAS,CAACI,QAAQ,CAACN,SAAS,CAAC,EAAE;MAClE,OAAOG,SAAS;IAClB;EACF;;EAEA;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMI,WAAW,GAAIC,IAAI,IAAK;EACnC,OAAOA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAClE,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,QAAQ,IAAK;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,EAAE;MAAEG,MAAM,EAAE;IAAO,CAAC,CAAC;IAC1D,OAAOF,QAAQ,CAACG,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEP,QAAQ,CAAC;IACzC,OAAO,KAAK;EACd;AACF,CAAC;AAED,eAAelB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}